"""
Django settings for oauth2provider project.

Generated by 'django-admin startproject' using Django 2.2.28.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import logging.config
import environ
import json

env = environ.Env(
    DEBUG=(bool, False)
)
environ.Env.read_env()

# read deployment type from envvar
# assume local-type deployment. Other possible choices? AWS? AWS-{PROD|DEV|TEST}? 
DEPLOYMENT_TYPE = os.environ.get('DEPLOYMENT_TYPE', 'local')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 3


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
#SECRET_KEY = '^k#&_@*dtt_af(=0$v_fgyj^is6q)9fkkuz&ecfkwj=ry^tx9m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# try to set up allowed hosts
try:
    ALLOWED_HOSTS = json.loads(os.environ.get('ALLOWED_HOSTS'))
except (json.JSONDecodeError, TypeError):
    # fall back to default localhost if we don't have any
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

if DEPLOYMENT_TYPE == 'AWS':
    import requests
    try:
        EC2_PRIVATE_IP = requests.get('http://169.254.169.254/latest/meta-data/local-ipv4', timeout=0.1).text
        if EC2_PRIVATE_IP:
            ALLOWED_HOSTS.append(EC2_PRIVATE_IP)
    except requests.exceptions.RequestException:
        pass
    APP_SERVER_FQDN = os.environ.get('APP_SERVER_FQDN', None)
    APP_LB_FQDN = os.environ.get('APP_LB_FQDN', None)
    OAUTH_SERVER_FQDN = os.environ.get('OAUTH_SERVER_FQDN', None)
    OAUTH_LB_FQDN = os.environ.get('OAUTH_LB_FQDN', None)
    if APP_SERVER_FQDN:
        ALLOWED_HOSTS.append(APP_SERVER_FQDN)
    if APP_LB_FQDN:
        ALLOWED_HOSTS.append(APP_LB_FQDN)
    if OAUTH_SERVER_FQDN:
        ALLOWED_HOSTS.append(OAUTH_SERVER_FQDN)
    if OAUTH_LB_FQDN:
        ALLOWED_HOSTS.append(OAUTH_LB_FQDN)

trusted_domains = []
for hostname in ALLOWED_HOSTS:
    trusted_domains.append(f"https://{hostname}")

trusted_domains.append('http://localhost:8000')

CSRF_TRUSTED_ORIGINS = trusted_domains
CSRF_COOKIE_HTTPONLY = False

# Application definition

#set to True to enable email verification.  This is done in AdVISE so we don't
# to do it twice.
ACCOUNT_EMAIL_VERIFICATION = os.environ.get("ACCOUNT_EMAIL_VERIFICATION", False)
LOGIN_REDIRECT_URL = 'provider:welcome'

DASHBOARD_LINK = os.environ.get('DASHBOARD_LINK', 'http://localhost:8000/advise/dashboard/')

REQUIRE_MFA_AUTH = os.environ.get('REQUIRE_MFA_AUTH', True)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    'provider',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
]



MIDDLEWARE = [
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    #'provider.middleware.ProviderTwoFactorMiddleware',
    'provider.middleware.Require2FAMiddleware', 
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]


#CORS_ALLOW_ALL_ORIGINS = False
#CORS_ALLOWED_ORIGINS = ['http://localhost:8000']

SESSION_COOKIE_NAME = 'adviseprovider_sessionid'

CRISPY_ALLOWED_TEMPLATE_PACKS='bootstrap5'
CRISPY_TEMPLATE_PACK='bootstrap5'

#OIDC_RSA_PRIVATE_KEY_FILE = os.environ.get('OIDC_RSA_PRIVATE_KEY_FILE')
#if OIDC_RSA_PRIVATE_KEY_FILE:
#    with open(OIDC_RSA_PRIVATE_KEY_FILE) as privatefile:
#        OIDC_RSA_PRIVATE_KEY = privatefile.read()

OAUTH2_PROVIDER = {
    "PKCE_REQUIRED": False
}
#    "OIDC_ENABLED": True,
#    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
#    "OAUTH2_VALIDATOR_CLASS": "authapp.oauth_validator.CustomOAuth2Validator",
#    "OIDC_RSA_PRIVATE_KEY": OIDC_RSA_PRIVATE_KEY,
#    "SCOPES": {
#        'read': 'Read scope',
#        'write': 'Write scope',
#        "openid": "OpenID Connect scope",
#    },
#}

# only prompt for approval the first time!
REQUEST_APPROVAL_PROMPT = 'auto'

ROOT_URLCONF = 'oauth2provider.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'provider/templates'),
                 os.path.join(ROOT_DIR, 'authapp/templates'),
                 os.path.join(ROOT_DIR, 'cvdp/templates')],

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oauth2provider.wsgi.application'

db_user = os.environ.get('DB_USER', 'advise')
db_password = os.environ.get('DB_PASS', 'advise')

if DEPLOYMENT_TYPE == "AWS":
    import boto3
    def get_secret(secret_arn):
        # Create a Secrets Manager client
        session = boto3.session.Session()
        client = session.client(service_name='secretsmanager', region_name=os.environ.get('AWS_REGION'))
        secrets = client.get_secret_value(SecretId=secret_arn)
        return json.loads(secrets['SecretString'])

    rds_secret_arn = os.environ.get('RDS_SECRET_ARN', None)
    if rds_secret_arn:
        rds_secret = get_secret(rds_secret_arn)
        db_user = rds_secret['username']
        db_password = rds_secret['password']

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME', 'adviseprovider'),
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', 5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# Add static file directory
STATICFILES_DIRS = (
    os.path.join(ROOT_DIR, 'cvdp/static'),
)

# set up STATIC files
# (assumed local unless otherwise)
# NOTE: When running in containers in environments that share or make static
#       files public via other methods (S3 bucket, cloudfront, etc.), it is
#       probably not necessary to run additional 'collectstatic' for this
#       container. However, if one chooses to do this, one must also remember
#       that updating any of the static files will typically require a
#       a redeployment of the AdVISE application container as well, presuming
#       that container runs a 'collectstatic' on its own. 
#
#       Running an additional 'collecstatic' here should not break anything
#       *if the containers are using the same image*, which will have all of
#       the React components present. There could be a race condition,
#       though, if using the '-clear' flag and both containers are starting
#       around the same time. The default 'app-startup.sh' present in the
#       supplied container build will take a "NOCLEAR" environment
#       variable, which will tell the script to omit the '-clear' flag to
#       help mitigate this issue. Optionally, one could also set the 
#       "NOCOLLECT" envvar, which will entirely skip the 'collectstatic' 
#       step. 
#
#       An additional option would be to use an entirely separate location
#       for the provider static files, which entirely mitigates any issues
#       discussed here.
STATIC_ROOT = BASE_DIR + "/staticfiles-provider"
if DEPLOYMENT_TYPE == 'AWS':
    INSTALLED_APPS.append('storages')
    USE_S3=True
    AWS_REGION = os.environ.get('AWS_REGION')
    AWS_DEPLOYED = True
    AWS_DEFAULT_ACL = None
#    LOGGER_HANDLER = 'watchtower'
#    EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
#    EMAIL_BACKEND = 'django_ses.SESBackend'
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = AWS_REGION

    # Tell django-storages the domain to use to refer to static files.
    AWS_S3_CUSTOM_DOMAIN = os.environ.get('STATIC_SERVER_FQDN', OAUTH_SERVER_FQDN)
    AWS_LOCATION = os.environ.get('AWS_LOCATION', 'static')
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    # Tell the staticfiles app to use S3Boto3 storage when writing the collected static files (when
    # you run `collectstatic`).
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    #PRIVATE_FILE_STORAGE = 'advise.storage_backends.PrivateMediaStorage'
    # unset STATIC_ROOT so we don't cause any conflicts with staticfiles
    STATIC_ROOT = None

# email configuration
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', 'test@test.org')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', CONTACT_EMAIL)
REPLY_TO_EMAIL = os.environ.get('REPLY_TO_EMAIL', CONTACT_EMAIL)
EMAIL_HEADERS = {}

# default to dump email to the console unless we actually configure email
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

# we might need to set some vars if user chooses to use the SMTP backend
# this is long but avoids overriding module defaults
if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    if (email_host := os.environ.get('EMAIL_HOST')):
        EMAIL_HOST = email_host
    if (email_port := os.environ.get('EMAIL_PORT')):
        EMAIL_PORT = email_port
    if (email_host_user := os.environ.get('EMAIL_HOST_USER')):
        EMAIL_HOST_USER = email_host_user
    if (email_host_password := os.environ.get('EMAIL_HOST_PASSWORD')):
        EMAIL_HOST_PASSWORD = email_host_password 
    if (email_use_tls := os.environ.get('EMAIL_USE_TLS')):
        EMAIL_USE_TLS = email_use_tls
    if (email_use_ssl := os.environ.get('EMAIL_USE_SSL')):
        EMAIL_USE_SSL = email_use_ssl
    if (email_timeout := os.environ.get('EMAIL_TIMEOUT')):
        EMAIL_TIMEOUT = email_timeout

# AWS SES email might have some regional settings
if EMAIL_BACKEND == 'django_ses.SESBackend':
    # django_ses defaults to using us-east-1. Set these to use an alt region.
    # If the region is set, one must also set the appropriate endpoint value.
    if (ses_region_name := os.environ.get("AWS_SES_REGION_NAME")):
        AWS_SES_REGION_NAME = ses_region_name
        AWS_SES_REGION_ENDPOINT = os.environ.get("AWS_SES_REGION_ENDPOINT")

# logging configuration
LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
DJANGO_LOGLEVEL = os.environ.get('DJANGO_LOGLEVEL', 'info').upper()
LOGGING_CONFIG = None
LOGGER_HANDLER = 'console'

logging_dict = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
	'console': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        # root logger                
        'provider': {
            'level': LOGLEVEL,
            'handlers': [LOGGER_HANDLER],
        },
    }
}
logging.config.dictConfig(logging_dict)

AUTH_USER_MODEL = 'provider.User'

RECAPTCHA_PUBLIC_KEY = os.environ.get('RECAPTCHA_SITE_KEY')

RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_SECRET_KEY')

RECAPTCHA_SUCCESS_SCORE = os.environ.get('RECAPTCHA_SUCCESS_SCORE', 0.5)
